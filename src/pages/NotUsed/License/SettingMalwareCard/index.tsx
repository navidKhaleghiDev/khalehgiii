import { useState } from 'react';
import { LoadingSpinner } from '@ui/molecules/Loading';
import { useTranslation } from 'react-i18next';
import { NoResult } from '@ui/molecules/NoResult';
import useSWR from 'swr';
import { HTTP_ANALYSES } from '@src/services/http';
import { API_MALWARE_ANTIVIRUS_UPDATE } from '@src/services/users';
import { toast } from 'react-toastify';
import { Modal } from '@ui/molecules/Modal';
import { ActionOnClickActionsType } from '@ui/atoms/BaseTable/types';
import { SettingMalwareTableConfigs } from './SettingMalwareTableConfigs/index';
import { IHeaderItem, IScannersConfig, KeysType } from './type';

type SettingMalwareCardProps = {
  disabled: boolean;
};
export function SettingMalwareCard({ disabled }: SettingMalwareCardProps) {
  const [openSettingModal, setOpenSettingModal] = useState(false);
  const [loadingButtonModal, setLoadingButtonModal] = useState(false);
  const [malwereData, setMalwereData] = useState<KeysType | null>(null);
  const { t } = useTranslation();

  const { data, isLoading, mutate } = useSWR(
    '/analyze/scanners_config/',
    HTTP_ANALYSES.fetcherSWR
  );

  const listWhiteList = data?.data ?? {};
  const listWhiteListTyped = listWhiteList as IScannersConfig;

  const headerItem: IHeaderItem = {
    created_at: t('table.dateOfCreated'),
    updated_at: t('table.dateOfUpdated'),
    sandbox_is_active: t('table.sandbox'),
    clamav_is_active: t('table.clamav'),
    yara_is_active: t('table.yara'),
    username: 'username',
    email: 'email',
  };

  const updateStatus = async (updatedData: KeysType) => {
    setLoadingButtonModal(true);
    await API_MALWARE_ANTIVIRUS_UPDATE(listWhiteListTyped?.id, updatedData)
      .then(() => {
        mutate();
        toast.success(t('global.sucessfulyUpdated'));
        if (openSettingModal) setOpenSettingModal(false);
      })
      .catch((err) => {
        toast.error(err);
        setLoadingButtonModal(false);
      })
      .finally(() => {
        setLoadingButtonModal(false);
        setOpenSettingModal(false);
      });
  };

  const handleOnClickActions = (
    action: ActionOnClickActionsType,
    keys: KeysType
  ) => {
    if (action === 'edit') {
      setOpenSettingModal(true);
      setMalwereData(keys);
    }
  };

  const settingMalwareTableConfigsBody = isLoading ? (
    <LoadingSpinner />
  ) : (
    (Object.keys(listWhiteListTyped).length !== 0 && (
      <SettingMalwareTableConfigs
        disabled={disabled}
        isLoading={loadingButtonModal}
        fileType={listWhiteListTyped}
        onClickActions={handleOnClickActions}
      />
    )) || <NoResult />
  );

  return (
    <div
      className={`w-full p-4  flex justify-center  items-center ${
        isLoading || loadingButtonModal ? 'loading' : ''
      }`}
    >
      <div className="w-full grid gap-6 grid-cols-12">
        <div className="col-span-6 ">
          <SettingMalwareTableConfigs isHeader fileType={headerItem} />
          {settingMalwareTableConfigsBody}
        </div>
      </div>
      <Modal
        open={openSettingModal}
        type="success"
        setOpen={setOpenSettingModal}
        title={t('global.sureAboutThis')}
        buttonOne={{
          label: t('global.yes'),
          onClick: () => updateStatus(malwereData as KeysType),
          loading: loadingButtonModal,
        }}
        buttonTow={{
          label: t('global.no'),
          onClick: () => setOpenSettingModal(false),
          color: 'red',
        }}
      />
    </div>
  );
}
