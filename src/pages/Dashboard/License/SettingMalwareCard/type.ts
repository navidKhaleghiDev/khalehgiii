import { ActionOnClickActionsType } from '@ui/atoms/BaseTable/types';

export interface IFileType {
  clamav_is_active: boolean;
  created_at: string;
  email: string;
  id?: number | string | undefined;
  license_creation: string;
  license_expiration_date: string;
  license_id: string;
  sandbox_is_active: boolean;
  updated_at: string;
  username: string | null | undefined;
  valid_license: boolean;
  yara_is_active: boolean;
}
export interface IHeaderItem {
  created_at: string;
  updated_at: string;
  clamav_is_active: string;
  sandbox_is_active: string;
  yara_is_active: string;
  username: string | null | undefined;
  email: string;
  id?: number | string | undefined;
  license_creation?: string;
  license_expiration_date?: string;
  license_id?: string;
  valid_license?: string;
}
export interface IScannersConfig {
  id: number;
  created_at: string;
  updated_at: string;
  sandbox_is_active: boolean;
  clamav_is_active: boolean;
  yara_is_active: boolean;
  license_id: 'ba4d4dc2-3106-4252-a837-eabe5b8cd9fd';
  sandbox_license: boolean;
  username: null | string;
  email: string;
  license_expiration_date: string;
  license_creation: null;
}
export type OnClickActionsMalware = (
  action: ActionOnClickActionsType,
  keys: KeysType
) => void;

export type KeysType = {
  [key: string]: boolean;
};
interface ClamavKeys {
  clamav_is_active: boolean;
}

interface SandboxKeys {
  sandbox_is_active: boolean;
}

interface YaraKeys {
  yara_is_active: boolean;
}

// Union type for all possible bodies
export type MalwareUpdateBody = ClamavKeys | SandboxKeys | YaraKeys;

// Alternatively, you could use an interface if the body contains more properties

export interface LicenseFileType {
  active: any;
  created?: string | null;
  expiry?: string;
  license: boolean;
  name: string;
  number: number;
  concurrent?: number;
}
