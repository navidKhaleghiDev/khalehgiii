import { useState } from 'react';
import { LoadingSpinner } from '@ui/molecules/Loading';
import { useTranslation } from 'react-i18next';
import { NoResult } from '@ui/molecules/NoResult';
import { useLanguage } from '@context/settings/languageContext';
import useSWR from 'swr';
import { HTTP_ANALYSES } from '@src/services/http';
import { API_MALWARE_ANTIVIRUS_UPDATE } from '@src/services/users';
import { toast } from 'react-toastify';
import { SettingMalwareTableConfigs } from './SettingMalwareTableConfigs/index';
import { IFileType, IHeaderItem } from '../type';
import { Modal } from '@ui/molecules/Modal';

export function SettingMalwareCard() {
  const [openSettingModal, setOpenSettingModal] = useState(false);
  const [loadingButtonModal, setLoadingButtonModal] = useState(false);
  const [malwereData, setMalwereData] = useState({ action: '', data: '' });
  const { lang } = useLanguage();
  const { t } = useTranslation();
  const dir = lang === 'en' ? 'rtl' : 'ltr';

  const {
    data: listData,
    isLoading,
    mutate,
  } = useSWR('/analyze/scanners_config/', HTTP_ANALYSES.fetcherSWR);

  const listWhiteList = listData?.data ?? {};

  const headerItem: IHeaderItem = {
    created_at: t('table.dateOfCreated'),
    updated_at: t('table.dateOfUpdated'),
    sandbox_is_active: t('table.sandbox'),
    clamav_is_active: t('table.clamav'),
    yara_is_active: t('table.yara'),
    username: 'username',
    email: 'email',
  };

  const updateStatus = async (data: any) => {
    setLoadingButtonModal(true);
    await API_MALWARE_ANTIVIRUS_UPDATE(listWhiteList?.id as any, data)
      .then(() => {
        mutate();
        toast.success(t('global.sucessfulyUpdated'));
        if (openSettingModal) setOpenSettingModal(false);
      })
      .catch((err) => {
        toast.error(err);
        setLoadingButtonModal(false);
      })
      .finally(() => {
        setLoadingButtonModal(false);
        setOpenSettingModal(false);
      });
  };

  function handleOnClickActions(action: string, keys: any): any {
    if (action === 'edit') {
      setMalwereData(keys);
    }
  }

  const settingMalwareTableConfigsBody = isLoading ? (
    <LoadingSpinner />
  ) : (
    (Object.keys(listWhiteList).length !== 0 && (
      <SettingMalwareTableConfigs
        isLoading={loadingButtonModal}
        fileType={listWhiteList}
        onClickActions={handleOnClickActions}
      />
    )) || <NoResult />
  );

  return (
    <div
      className={`w-full p-4  flex justify-center  items-center ${
        isLoading || loadingButtonModal ? 'loading' : ''
      }`}
    >
      <div className="w-full grid gap-6 grid-cols-12">
        <div className="col-span-6 ">
          <SettingMalwareTableConfigs isHeader fileType={headerItem} />
          {settingMalwareTableConfigsBody}
        </div>
      </div>
      <Modal
        open={openSettingModal}
        type="success"
        setOpen={setOpenSettingModal}
        title={t('global.sureAboutThis')}
        buttonOne={{
          label: t('global.yes'),
          onClick: () => updateStatus(malwereData),
          loading: loadingButtonModal,
        }}
        buttonTow={{
          label: t('global.no'),
          onClick: () => setOpenSettingModal(false),
          color: 'red',
        }}
      />
    </div>
  );
}
