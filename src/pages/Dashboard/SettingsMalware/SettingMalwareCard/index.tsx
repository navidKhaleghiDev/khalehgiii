// import { IFileType } from '@src/services/config/types';

import { LoadingSpinner } from '@ui/molecules/Loading';
import { useTranslation } from 'react-i18next';
import { Typography } from '@ui/atoms';
import { NoResult } from '@ui/molecules/NoResult';
import { useLanguage } from '@context/settings/languageContext';
import { IFileType, IHeaderItem } from '../type';
import { SettingMalwareTableConfigs } from './SettingMalwareTableConfigs/index';
import { SettingMalwareTableLicense } from './SettingMalwareTableLicense';

type FileTypeCardProps = {
  fileType: IFileType | IHeaderItem;
  onClickActions?: (action: string, keys: object) => void | undefined;
  isLoading?: boolean;
  headerItem: IHeaderItem;
  loadingButtonModal: boolean;
};

export function SettingMalwareCard({
  headerItem,
  fileType,
  onClickActions,
  isLoading,
  loadingButtonModal,
}: FileTypeCardProps) {
  const { lang } = useLanguage();
  const { t } = useTranslation();
  const dir = lang === 'en' ? 'rtl' : 'ltr';
  const settingMalwareTableConfigsBody = isLoading ? (
    <LoadingSpinner />
  ) : (
    (Object.keys(fileType).length !== 0 && (
      <SettingMalwareTableConfigs
        isLoading={loadingButtonModal}
        fileType={fileType}
        // eslint-disable-next-line react/no-unknown-property
        onClickActions={onClickActions}
      />
    )) || <NoResult />
  );
  const settingMalwareTableLicensBody = isLoading ? (
    <LoadingSpinner />
  ) : (
    (Object.keys(fileType).length !== 0 && (
      <SettingMalwareTableLicense fileType={fileType} />
    )) || <NoResult />
  );

  return (
    <div
      className={`w-full p-4  ${
        isLoading || loadingButtonModal ? 'loading' : ''
      }`}
    >
      <div className="p-3 mt-4">
        <div
          className="w-2/12 flex justify-center items-center  gap-4"
          dir={dir}
        >
          <Typography
            size="body4"
            type="div"
            className="uppercase text-slate-500"
          >
            {fileType?.email}
          </Typography>
          <Typography size="body3" type="div" className="uppercase">
            :{t('table.email')}
          </Typography>
        </div>
        <div
          className=" w-2/12 flex justify-center items-center gap-4"
          dir={dir}
        >
          <Typography
            size="body4"
            type="div"
            className="uppercase text-slate-500"
          >
            {fileType?.username}
          </Typography>
          <Typography size="body3" type="div" className="uppercase">
            :{t('table.userName')}
          </Typography>
        </div>
      </div>
      <div className="w-full grid gap-6 grid-cols-12">
        <div className="col-span-6">
          <SettingMalwareTableLicense isHeader fileType={headerItem} />
          {settingMalwareTableLicensBody}
        </div>
        <div className="col-span-6 ">
          <SettingMalwareTableConfigs isHeader fileType={headerItem} />
          {settingMalwareTableConfigsBody}
        </div>
      </div>
    </div>
  );
}
