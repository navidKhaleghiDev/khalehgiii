import { useEffect, useState } from 'react';
import { BaseButton, BaseInput, Typography } from '@ui/atoms';
import { useForm } from 'react-hook-form';
import { toast } from 'react-toastify';
import { regexPattern } from '@ui/atoms/Inputs';
import { IUser } from '@src/services/users/types';
import { LoadingSpinner } from '@ui/molecules/Loading';
import { Divider } from '@ui/atoms/Divider';
import { HTTP_ANALYSES } from '@src/services/http';
import useSWR from 'swr';
import {
  API_ANALYZE_LOG_CREATE,
  API_ANALYZE_LOG_UPDATE,
  API_CONFIG_ANALYZE_LOG,
} from '@src/services/analyze';
import { IAddConfigAnalyze } from '@src/services/analyze/types';
import { NoResult } from '@ui/molecules/NoResult';
import { useTranslation } from 'react-i18next';
import { API_MALWARE_ANTIVIRUS_UPDATE } from '@src/services/users';
import { Modal } from '@ui/molecules/Modal';
import { SettingMalwareCard } from './SettingMalwareCard';
import { IFileType, IHeaderItem } from './type';

function TitleSection({ label }: { label: string }) {
  return (
    <Typography
      color="neutral"
      size="h5"
      className="w-full my-4 col-span-12 text-left uppercase"
    >
      {label}
    </Typography>
  );
}

export function SettingsMalware({ user }: { user: IUser | null }) {
  const { t } = useTranslation();
  const [loadingButton, setLoadingButton] = useState(false);
  const [loading, setLoading] = useState(true);
  const [openSettingModal, setOpenSettingModal] = useState(false);
  const [loadingButtonModal, setLoadingButtonModal] = useState(false);
  const [malwereData, setMalwereData] = useState({ action: '', data: '' });

  const {
    data: listData,
    isLoading,
    mutate,
  } = useSWR('/analyze/scanners_config/', HTTP_ANALYSES.fetcherSWR);

  const listWhiteList = listData?.data ?? {};
  const listWhiteListTyped = listWhiteList as IFileType;

  const { control, handleSubmit, reset, getValues } =
    useForm<IAddConfigAnalyze>({
      mode: 'onChange',
    });

  useEffect(() => {
    const getConfig = async () => {
      await API_CONFIG_ANALYZE_LOG()
        .then(({ data }) => {
          if (data[0]) {
            reset(data[0]);
          }
        })
        .catch(() => {
          // ...
        })
        .finally(() => {
          setLoading(false);
        });
    };
    if (user) {
      getConfig();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const handleOnSubmit = async (data: IAddConfigAnalyze) => {
    setLoadingButton(true);

    if (data?.id) {
      // update
      await API_ANALYZE_LOG_UPDATE(data)
        .then(() => {
          toast.success('با موفقیت بروزرسانی شد');
        })
        .catch((err) => {
          toast.error(err);
        })
        .finally(() => setLoadingButton(false));
      return;
    }
    // add new product
    await API_ANALYZE_LOG_CREATE(data)
      .then(() => {
        toast.success('با موفقیت ذخیره شد');
      })
      .catch((err) => {
        toast.error(err);
      })
      .finally(() => setLoadingButton(false));
  };

  const updateStatus = async (data: any) => {
    setLoadingButtonModal(true);
    await API_MALWARE_ANTIVIRUS_UPDATE(listWhiteListTyped?.id as any, data)
      .then(() => {
        mutate();
        toast.success(t('global.sucessfulyUpdated'));
        if (openSettingModal) setOpenSettingModal(false);
      })
      .catch((err) => {
        toast.error(err);
        setLoadingButtonModal(false);
      })
      .finally(() => {
        setLoadingButtonModal(false);
        setOpenSettingModal(false);
      });
  };
  function handleOnClickActions(action: string, keys: any): any {
    if (action === 'edit') {
      setOpenSettingModal(true);
      setMalwereData(keys);
    }
  }

  const headerItem: IHeaderItem = {
    created_at: t('table.dateOfCreated'),
    updated_at: t('table.dateOfUpdated'),
    sandbox_is_active: t('table.sandbox'),
    clamav_is_active: t('table.clamav'),
    yara_is_active: t('table.yara'),
    license_id: t('table.license_id'),
    valid_license: t('table.validLicense'),
    username: 'username',
    email: 'email',
    license_expiration_date: t('table.licenseExpirationDate'),
    license_creation: t('table.licenseCreation'),
  };
  const SettingMalwareCardContent = isLoading ? (
    <LoadingSpinner />
  ) : (
    (Object.keys(listWhiteListTyped).length !== 0 && (
      <SettingMalwareCard
        fileType={listWhiteListTyped}
        // eslint-disable-next-line react/jsx-no-bind
        onClickActions={handleOnClickActions}
      />
    )) || <NoResult />
  );

  return loading ? (
    <LoadingSpinner />
  ) : (
    <>
      <div className="p-3">
        <div className="px-3 w-2/12 flex justify-center items-center" dir="ltr">
          <Typography size="body3" type="div" className="uppercase">
            {listWhiteListTyped?.email}
          </Typography>
        </div>
        <div className="px-3 w-2/12 flex justify-center items-center" dir="ltr">
          <Typography size="body3" type="div" className="uppercase">
            {listWhiteListTyped?.username}
          </Typography>
        </div>
      </div>
      <SettingMalwareCard fileType={headerItem} isHeader />
      {SettingMalwareCardContent}
      <form
        className="w-full flex flex-col items-center justify-between"
        onSubmit={handleSubmit(handleOnSubmit)}
      >
        <TitleSection label="log server" />
        <Divider />
        <div className="grid w-full grid-cols-12 gap-16 mt-4" dir="ltr">
          <div className="col-span-4">
            <BaseInput
              id="log_server_host"
              name="log_server_host"
              rules={{
                required: regexPattern.required,
                pattern: regexPattern.ip,
              }}
              control={control}
              label="log server host"
              placeholder="192.168.1.1"
              ltrLabel
              fullWidth
            />
          </div>
          <div className="col-span-4">
            <BaseInput
              id="log_server_port"
              name="log_server_port"
              rules={{
                required: regexPattern.required,
              }}
              control={control}
              label="log server port"
              placeholder="8000"
              ltrLabel
              fullWidth
            />
          </div>
        </div>
        <BaseButton
          label={getValues('id') ? 'بروزرسانی تنظیمات' : 'ذخیره تنظیمات'}
          size="xl"
          submit
          loading={loadingButton}
        />
      </form>
      <Modal
        open={openSettingModal}
        type="success"
        setOpen={setOpenSettingModal}
        title="از انجام این کار مطمئن هستید؟"
        buttonOne={{
          label: 'بله',
          onClick: () => updateStatus(malwereData),
          loading: loadingButtonModal,
        }}
        buttonTow={{
          label: 'خیر',
          onClick: () => setOpenSettingModal(false),
          color: 'red',
        }}
      />
    </>
  );
}
