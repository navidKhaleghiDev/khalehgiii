import { useEffect, useState } from 'react';
import { BaseButton, BaseInput, Typography } from '@ui/atoms';
import { useForm } from 'react-hook-form';
import { toast } from 'react-toastify';
import { regexPattern } from '@ui/atoms/Inputs';
import { IUser } from '@src/services/users/types';
import { LoadingSpinner } from '@ui/molecules/Loading';
import { Divider } from '@ui/atoms/Divider';
import {
  API_ANALYZE_LOG_CREATE,
  API_ANALYZE_LOG_UPDATE,
  API_CONFIG_ANALYZE_LOG,
} from '@src/services/analyze';
import { IAddConfigAnalyze } from '@src/services/analyze/types';

function TitleSection({ label }: { label: string }) {
  return (
    <Typography
      color="neutral"
      size="h5"
      className="w-full my-4 col-span-12 text-left uppercase"
    >
      {label}
    </Typography>
  );
}
export function SettingsMalware({ user }: { user: IUser | null }) {
  const [loadingButton, setLoadingButton] = useState(false);
  const [loading, setLoading] = useState(true);

  const { control, handleSubmit, reset, getValues } =
    useForm<IAddConfigAnalyze>({
      mode: 'onChange',
    });

  useEffect(() => {
    const getConfig = async () => {
      await API_CONFIG_ANALYZE_LOG()
        .then(({ data }) => {
          if (data[0]) {
            reset(data[0]);
          }
        })
        .catch(() => {
          // ...
        })
        .finally(() => {
          setLoading(false);
        });
    };
    if (user) {
      getConfig();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const handleOnSubmit = async (data: IAddConfigAnalyze) => {
    setLoadingButton(true);

    if (data?.id) {
      // update
      await API_ANALYZE_LOG_UPDATE(data)
        .then(() => {
          toast.success('با موفقیت بروزرسانی شد');
        })
        .catch((err) => {
          toast.error(err);
        })
        .finally(() => setLoadingButton(false));
      return;
    }
    // add new product
    await API_ANALYZE_LOG_CREATE(data)
      .then(() => {
        toast.success('با موفقیت ذخیره شد');
      })
      .catch((err) => {
        toast.error(err);
      })
      .finally(() => setLoadingButton(false));
  };

  return loading ? (
    <LoadingSpinner />
  ) : (
    <form
      className=" w-full flex flex-col items-center justify-between"
      onSubmit={handleSubmit(handleOnSubmit)}
    >
      <TitleSection label="log server" />
      <Divider />
      <div className="grid w-full grid-cols-12 gap-16 mt-4" dir="ltr">
        <div className="col-span-4">
          <BaseInput
            id="log_server_host"
            name="log_server_host"
            rules={{
              required: regexPattern.required,
              pattern: regexPattern.ip,
            }}
            control={control}
            label="log server host"
            placeholder="192.168.1.1"
            ltrLabel
            fullWidth
          />
        </div>
        <div className="col-span-4">
          <BaseInput
            id="log_server_port"
            name="log_server_port"
            rules={{
              required: regexPattern.required,
              // maxLength: {
              //   value: 5,
              //   message: "Input cannot exceed 10 characters",
              // },
            }}
            control={control}
            label="log server port"
            placeholder="8000"
            ltrLabel
            fullWidth
          />
        </div>
      </div>

      <BaseButton
        label={getValues('id') ? 'بروزرسانی تنظیمات' : 'ذخیره تنظیمات'}
        size="xl"
        submit
        loading={loadingButton}
      />
    </form>
  );
}
